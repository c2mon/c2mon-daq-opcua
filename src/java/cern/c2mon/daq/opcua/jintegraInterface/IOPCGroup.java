package cern.c2mon.daq.opcua.jintegraInterface;

import java.io.IOException;

/**
 * COM Interface 'IOPCGroup'. Generated 10/5/2006 11:24:10 AM
 * from 'G:\Users\t\timoper\Public\opcdaauto.dll'<P>
 * Generated using com2java Version 2.6 Copyright (c) Intrinsyc Software International, Inc.
 * See  <A HREF="http://j-integra.intrinsyc.com/">http://j-integra.intrinsyc.com/</A><P>
 * Description: '<B>OPC Group Object</B>'
 *
 * Generator Options:
 *   AwtForOcxs = False
 *   PromptForTypeLibraries = False
 *   RetryOnReject = False
 *   IDispatchOnly = False
 *   GenBeanInfo = False
 *   LowerCaseMemberNames = True
 *   TreatInStarAsIn = False
 *   ArraysAsObjects = False
 *   OmitRestrictedMethods = False
 *   ClashPrefix = zz_
 *   ImplementConflictingInterfaces = False
 *   DontRenameSameMethods = False
 *   RenameConflictingInterfaceMethods = False
 *   ReuseMethods = False
 *
 * Command Line Only Options:
 *   MakeClsidsPublic = False
 *   DontOverwrite = False
 */
public interface IOPCGroup extends java.io.Serializable {
  /**
   * addDIOPCGroupEventListener.  Listen to events generated by this class.
   *
   * @param    theListener An object that implements the cern.c2mon.daq.opcua.jintegraInterface.DIOPCGroupEvent interface.
   * @exception java.io.IOException If there are communications problems.
   */
  void addDIOPCGroupEventListener(DIOPCGroupEvent theListener) throws IOException;
  /**
   * getParent. Gets the parent OPCServer
   *
   * @return    An reference to a cern.c2mon.daq.opcua.jintegraInterface.IOPCAutoServer
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public cern.c2mon.daq.opcua.jintegraInterface.IOPCAutoServer getParent  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * getName. Gets the group name.
   *
   * @return    The name
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public String getName  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * setName. Gets the group name.
   *
   * @param     name The name (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setName  (
              String name) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * isPublic. Indicates whether a group is public or private.
   *
   * @return    The isPublic
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public boolean isPublic  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * isActive. Gets the group active state.
   *
   * @return    The isActive
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public boolean isActive  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * setIsActive. Gets the group active state.
   *
   * @param     isActive The isActive (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setIsActive  (
              boolean isActive) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * isSubscribed. Gets whether asynchronous updates are enabled.
   *
   * @return    The isSubscribed
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public boolean isSubscribed  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * setIsSubscribed. Gets whether asynchronous updates are enabled.
   *
   * @param     isSubscribed The isSubscribed (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setIsSubscribed  (
              boolean isSubscribed) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * getClientHandle. Gets the group client handle.
   *
   * @return    The clientHandle
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getClientHandle  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * setClientHandle. Gets the group client handle.
   *
   * @param     clientHandle The clientHandle (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setClientHandle  (
              int clientHandle) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * getServerHandle. Gets the group server handle.
   *
   * @return    The serverHandle
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getServerHandle  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * getLocaleID. Gets the group locale setting.
   *
   * @return    The localeID
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getLocaleID  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * setLocaleID. Gets the group locale setting.
   *
   * @param     localeID The localeID (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setLocaleID  (
              int localeID) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * getTimeBias. Gets the group time bias.
   *
   * @return    The timeBias
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getTimeBias  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * setTimeBias. Gets the group time bias.
   *
   * @param     timeBias The timeBias (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setTimeBias  (
              int timeBias) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * getDeadBand. Gets the group deadband.
   *
   * @return    The deadBand
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public float getDeadBand  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * setDeadBand. Gets the group deadband.
   *
   * @param     deadBand The deadBand (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setDeadBand  (
              float deadBand) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * getUpdateRate. Gets the group update rate in milliseconds.
   *
   * @return    The updateRate
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getUpdateRate  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * setUpdateRate. Gets the group update rate in milliseconds.
   *
   * @param     updateRate The updateRate (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setUpdateRate  (
              int updateRate) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * getOPCItems. Returns the OPCItems collection
   *
   * @return    An reference to a cern.c2mon.daq.opcua.jintegraInterface.OPCItems
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public cern.c2mon.daq.opcua.jintegraInterface.OPCItems getOPCItems  () throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * syncRead. 
   *
   * @param     source The source (in)
   * @param     numItems The numItems (in)
   * @param     serverHandles The serverHandles (in)
   * @param     values A Variant (out: use single element array)
   * @param     errors The errors (out: use single element array)
   * @param     qualities A Variant (out: use single element array, optional, pass single element of null if not required)
   * @param     timeStamps A Variant (out: use single element array, optional, pass single element of null if not required)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void syncRead  (
              short source,
              int numItems,
              int[] serverHandles,
              Object[][] values,
              int[][] errors,
              Object[] qualities,
              Object[] timeStamps) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * syncWrite. 
   *
   * @param     numItems The numItems (in)
   * @param     serverHandles The serverHandles (in)
   * @param     values A Variant (in)
   * @param     errors The errors (out: use single element array)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void syncWrite  (
              int numItems,
              int[] serverHandles,
              Object[] values,
              int[][] errors) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * asyncRead. 
   *
   * @param     numItems The numItems (in)
   * @param     serverHandles The serverHandles (in)
   * @param     errors The errors (out: use single element array)
   * @param     transactionID The transactionID (in)
   * @param     cancelID The cancelID (out: use single element array)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void asyncRead  (
              int numItems,
              int[] serverHandles,
              int[][] errors,
              int transactionID,
              int[] cancelID) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * asyncWrite. 
   *
   * @param     numItems The numItems (in)
   * @param     serverHandles The serverHandles (in)
   * @param     values A Variant (in)
   * @param     errors The errors (out: use single element array)
   * @param     transactionID The transactionID (in)
   * @param     cancelID The cancelID (out: use single element array)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void asyncWrite  (
              int numItems,
              int[] serverHandles,
              Object[] values,
              int[][] errors,
              int transactionID,
              int[] cancelID) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * asyncRefresh. 
   *
   * @param     source The source (in)
   * @param     transactionID The transactionID (in)
   * @param     cancelID The cancelID (out: use single element array)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void asyncRefresh  (
              short source,
              int transactionID,
              int[] cancelID) throws java.io.IOException, com.linar.jintegra.AutomationException;

  /**
   * asyncCancel. 
   *
   * @param     cancelID The cancelID (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void asyncCancel  (
              int cancelID) throws java.io.IOException, com.linar.jintegra.AutomationException;


  // Constants to help J-Integra for COM dynamically map DCOM invocations to
  // interface members.  Don't worry, you will never need to explicitly use these constants.
  int IID28e68f96_8d75_11d1_8dc3_3c302a000000 = 1;
  /** Dummy reference to interface proxy to make sure it gets compiled */
  int xxDummy = IOPCGroupProxy.xxDummy;
  /** Used internally by J-Integra for COM, please ignore */
  String IID = "28e68f96-8d75-11d1-8dc3-3c302a000000";
  String DISPID_1610743808_GET_NAME = "getParent";
  String DISPID_1610743809_GET_NAME = "getName";
  String DISPID_1610743809_PUT_NAME = "setName";
  String DISPID_1610743811_GET_NAME = "isPublic";
  String DISPID_1610743812_GET_NAME = "isActive";
  String DISPID_1610743812_PUT_NAME = "setIsActive";
  String DISPID_1610743814_GET_NAME = "isSubscribed";
  String DISPID_1610743814_PUT_NAME = "setIsSubscribed";
  String DISPID_1610743816_GET_NAME = "getClientHandle";
  String DISPID_1610743816_PUT_NAME = "setClientHandle";
  String DISPID_1610743818_GET_NAME = "getServerHandle";
  String DISPID_1610743819_GET_NAME = "getLocaleID";
  String DISPID_1610743819_PUT_NAME = "setLocaleID";
  String DISPID_1610743821_GET_NAME = "getTimeBias";
  String DISPID_1610743821_PUT_NAME = "setTimeBias";
  String DISPID_1610743823_GET_NAME = "getDeadBand";
  String DISPID_1610743823_PUT_NAME = "setDeadBand";
  String DISPID_1610743825_GET_NAME = "getUpdateRate";
  String DISPID_1610743825_PUT_NAME = "setUpdateRate";
  String DISPID_0_GET_NAME = "getOPCItems";
  String DISPID_1610743828_NAME = "syncRead";
  String DISPID_1610743829_NAME = "syncWrite";
  String DISPID_1610743830_NAME = "asyncRead";
  String DISPID_1610743831_NAME = "asyncWrite";
  String DISPID_1610743832_NAME = "asyncRefresh";
  String DISPID_1610743833_NAME = "asyncCancel";
}
