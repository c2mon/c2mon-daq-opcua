package cern.c2mon.daq.opcua.jintegraInterface;

import com.linar.jintegra.*;

/**
 * COM Class 'OPCGroup'. Generated 10/5/2006 11:24:10 AM
 * from 'G:\Users\t\timoper\Public\opcdaauto.dll'<P>
 * Generated using com2java Version 2.6 Copyright (c) Intrinsyc Software International, Inc.
 * See  <A HREF="http://j-integra.intrinsyc.com/">http://j-integra.intrinsyc.com/</A><P>
 * Description '<B>OPC Automation Group</B>'
 *
 * Generator Options:
 *   AwtForOcxs = False
 *   PromptForTypeLibraries = False
 *   RetryOnReject = False
 *   IDispatchOnly = False
 *   GenBeanInfo = False
 *   LowerCaseMemberNames = True
 *   TreatInStarAsIn = False
 *   ArraysAsObjects = False
 *   OmitRestrictedMethods = False
 *   ClashPrefix = zz_
 *   ImplementConflictingInterfaces = False
 *   DontRenameSameMethods = False
 *   RenameConflictingInterfaceMethods = False
 *   ReuseMethods = False
 *
 * Command Line Only Options:
 *   MakeClsidsPublic = False
 *   DontOverwrite = False
 */
public class OPCGroup implements com.linar.jintegra.RemoteObjRef, cern.c2mon.daq.opcua.jintegraInterface.IOPCGroup {

  private static final String CLSID = "28e68f9b-8d75-11d1-8dc3-3c302a000000";

  protected String getJintegraVersion() { return "2.6"; }

  // Interface delegates
  private cern.c2mon.daq.opcua.jintegraInterface.IOPCGroupProxy d_IOPCGroupProxy = null;

  /** Access this COM class's cern.c2mon.daq.opcua.jintegraInterface.IOPCGroup interface */
  public cern.c2mon.daq.opcua.jintegraInterface.IOPCGroup getAsIOPCGroup() { return d_IOPCGroupProxy; }

  /** Compare this object with another */
  public boolean equals(Object o) { 
	if(java.beans.Beans.isDesignTime()) return super.equals(o);
	else return getJintegraDispatch() == null ? false : getJintegraDispatch().equals(o);
  }


  /** the hashcode for this object */
  public int hashCode() { return getJintegraDispatch() == null ? 0 : getJintegraDispatch().hashCode(); }

   /**
   * getActiveObject. Get a reference to a running instance of this class on the current machine using native code.
   *                  <B>Uses native code (See GetActiveObject() in MS doc) and thus can only be used on MS Windows</B>
   *
   * @return    A reference to the running object.
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If there was an error attaching to the instance.
   */
  public static OPCGroup getActiveObject() throws com.linar.jintegra.AutomationException, java.io.IOException {
    return new OPCGroup(com.linar.jintegra.Dispatch.getActiveObject(CLSID));
  }

  /**
   * bindUsingMoniker. Bind to a running instance of this class using the supplied ObjRef moniker
   *
   * @return    A reference to the running object.
   * @param     moniker The ObjRef Moniker (Created using Windows CreateObjrefMoniker() and IMoniker->GetDisplayName).
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If there was an error attaching to the instance.
   */
  public static OPCGroup bindUsingMoniker(String moniker) throws com.linar.jintegra.AutomationException, java.io.IOException {
    return new OPCGroup(com.linar.jintegra.Dispatch.bindUsingMoniker(moniker));
  }

  /** J-Integra for COM internal method */
  public com.linar.jintegra.Dispatch getJintegraDispatch() {  return d_IOPCGroupProxy; }

  /**
   * addDIOPCGroupEventListener.  Listen to events generated by this class.
   *
   * @param    theListener An object that implements the cern.c2mon.daq.opcua.jintegraInterface.DIOPCGroupEvent interface.
   * @exception java.io.IOException If there are communications problems.
   */
  @Override
  public void addDIOPCGroupEventListener(cern.c2mon.daq.opcua.jintegraInterface.DIOPCGroupEvent theListener) throws java.io.IOException {
    d_IOPCGroupProxy.addListener("28e68f97-8d75-11d1-8dc3-3c302a000000", theListener, this);
  }

  /**
   * removeDIOPCGroupEventListener.  Stop listening to events generated by this class.
   *
   * @param    theListener An object that implements the cern.c2mon.daq.opcua.jintegraInterface.DIOPCGroupEvent interface.
   * @exception java.io.IOException If there are communications problems.
   */
  public void removeDIOPCGroupEventListener(cern.c2mon.daq.opcua.jintegraInterface.DIOPCGroupEvent theListener) throws java.io.IOException {
    d_IOPCGroupProxy.removeListener("28e68f97-8d75-11d1-8dc3-3c302a000000", theListener);
  }

  /**
   * Constructs a OPCGroup on the local host.
   * @exception java.io.IOException if there are problems communicating via DCOM 
   * @exception java.net.UnknownHostException if the host can not be found 
   */
  public OPCGroup() throws java.io.IOException, java.net.UnknownHostException {
    this("localhost");
  }

  /**
   * Construct a OPCGroup on specified host.
   * @param     host  the host on which the object should be created
   * @exception java.io.IOException if there are problems communicating via DCOM 
   * @exception java.net.UnknownHostException if the host can not be found 
   */
  public OPCGroup(String host) throws java.io.IOException, java.net.UnknownHostException {
    d_IOPCGroupProxy = new cern.c2mon.daq.opcua.jintegraInterface.IOPCGroupProxy(CLSID, host, null);
  }

  /**
   * Construct a OPCGroup using a reference to such an object returned from a COM server
   * @param     obj an object returned from a COM server
   * @exception java.io.IOException if there are problems communicating via DCOM 
   */
  public OPCGroup(Object obj) throws java.io.IOException {
    d_IOPCGroupProxy = new cern.c2mon.daq.opcua.jintegraInterface.IOPCGroupProxy(obj);
  }

  /**
   * Release a OPCGroup.
   */
  public void release() {
    com.linar.jintegra.Cleaner.release(d_IOPCGroupProxy);
  }

  /**
   * getPropertyByName. Get the value of a property dynamically at run-time, based on its name
   *
   * @return    The value of the property.
   * @param     name The name of the property to get.
   * @exception java.lang.NoSuchFieldException If the property does not exit.
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public Object getPropertyByName(String name) throws NoSuchFieldException, java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.getPropertyByName(name);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    } catch(NoSuchFieldException noSuchFieldException) {
      noSuchFieldException.fillInStackTrace();
      throw noSuchFieldException;
    }
  }

  /**
   * getPropertyByName. Get the value of a property dynamically at run-time, based on its name and a parameter
   *
   * @return    The value of the property.
   * @param     name The name of the property to get.
   * @param     rhs A parameter used when getting the proxy.
   * @exception java.lang.NoSuchFieldException If the property does not exit.
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public Object getPropertyByName(String name, Object rhs) throws NoSuchFieldException, java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.getPropertyByName(name, rhs);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    } catch(NoSuchFieldException noSuchFieldException) {
      noSuchFieldException.fillInStackTrace();
      throw noSuchFieldException;
    }
  }

  /**
   * invokeMethodByName. Invoke a method dynamically at run-time
   *
   * @return    The value returned by the method (null if none).
   * @param     name The name of the method to be invoked.
   * @param     parameters One element for each parameter. Use primitive type wrappers.
   *            to pass primitive types (eg Integer to pass an int).
   * @exception java.lang.NoSuchMethodException If the method does not exit.
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public Object invokeMethodByName(String name, Object[] parameters) throws NoSuchMethodException, java.io.IOException, com.linar.jintegra.AutomationException {
    return d_IOPCGroupProxy.invokeMethodByName(name, parameters);
  }

  /**
   * invokeMethodByName. Invoke a method dynamically at run-time
   *
   * @return    The value returned by the method (null if none).
   * @param     name The name of the method to be invoked.
   * @exception java.lang.NoSuchMethodException If the method does not exit.
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public Object invokeMethodByName(String name) throws NoSuchMethodException, java.io.IOException, com.linar.jintegra.AutomationException {
    return d_IOPCGroupProxy.invokeMethodByName(name, new Object[]{});
  }

  /**
   * getParent. Gets the parent OPCServer
   *
   * @return    An reference to a cern.c2mon.daq.opcua.jintegraInterface.IOPCAutoServer
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public cern.c2mon.daq.opcua.jintegraInterface.IOPCAutoServer getParent  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.getParent();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getName. Gets the group name.
   *
   * @return    The name
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public String getName  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.getName();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * setName. Gets the group name.
   *
   * @param     name The name (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setName  (
              String name) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.setName(name);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * isPublic. Indicates whether a group is public or private.
   *
   * @return    The isPublic
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public boolean isPublic  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.isPublic();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * isActive. Gets the group active state.
   *
   * @return    The isActive
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public boolean isActive  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.isActive();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * setIsActive. Gets the group active state.
   *
   * @param     isActive The isActive (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setIsActive  (
              boolean isActive) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.setIsActive(isActive);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * isSubscribed. Gets whether asynchronous updates are enabled.
   *
   * @return    The isSubscribed
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public boolean isSubscribed  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.isSubscribed();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * setIsSubscribed. Gets whether asynchronous updates are enabled.
   *
   * @param     isSubscribed The isSubscribed (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setIsSubscribed  (
              boolean isSubscribed) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.setIsSubscribed(isSubscribed);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getClientHandle. Gets the group client handle.
   *
   * @return    The clientHandle
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getClientHandle  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.getClientHandle();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * setClientHandle. Gets the group client handle.
   *
   * @param     clientHandle The clientHandle (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setClientHandle  (
              int clientHandle) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.setClientHandle(clientHandle);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getServerHandle. Gets the group server handle.
   *
   * @return    The serverHandle
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getServerHandle  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.getServerHandle();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getLocaleID. Gets the group locale setting.
   *
   * @return    The localeID
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getLocaleID  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.getLocaleID();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * setLocaleID. Gets the group locale setting.
   *
   * @param     localeID The localeID (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setLocaleID  (
              int localeID) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.setLocaleID(localeID);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getTimeBias. Gets the group time bias.
   *
   * @return    The timeBias
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getTimeBias  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.getTimeBias();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * setTimeBias. Gets the group time bias.
   *
   * @param     timeBias The timeBias (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setTimeBias  (
              int timeBias) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.setTimeBias(timeBias);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getDeadBand. Gets the group deadband.
   *
   * @return    The deadBand
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public float getDeadBand  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.getDeadBand();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * setDeadBand. Gets the group deadband.
   *
   * @param     deadBand The deadBand (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setDeadBand  (
              float deadBand) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.setDeadBand(deadBand);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getUpdateRate. Gets the group update rate in milliseconds.
   *
   * @return    The updateRate
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getUpdateRate  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.getUpdateRate();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * setUpdateRate. Gets the group update rate in milliseconds.
   *
   * @param     updateRate The updateRate (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setUpdateRate  (
              int updateRate) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.setUpdateRate(updateRate);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getOPCItems. Returns the OPCItems collection
   *
   * @return    An reference to a cern.c2mon.daq.opcua.jintegraInterface.OPCItems
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public cern.c2mon.daq.opcua.jintegraInterface.OPCItems getOPCItems  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCGroupProxy.getOPCItems();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * syncRead. 
   *
   * @param     source The source (in)
   * @param     numItems The numItems (in)
   * @param     serverHandles The serverHandles (in)
   * @param     values A Variant (out: use single element array)
   * @param     errors The errors (out: use single element array)
   * @param     qualities A Variant (out: use single element array, optional, pass single element of null if not required)
   * @param     timeStamps A Variant (out: use single element array, optional, pass single element of null if not required)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void syncRead  (
              short source,
              int numItems,
              int[] serverHandles,
              Object[][] values,
              int[][] errors,
              Object[] qualities,
              Object[] timeStamps) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.syncRead(source,numItems,serverHandles,values,errors,qualities,timeStamps);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * syncWrite. 
   *
   * @param     numItems The numItems (in)
   * @param     serverHandles The serverHandles (in)
   * @param     values A Variant (in)
   * @param     errors The errors (out: use single element array)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void syncWrite  (
              int numItems,
              int[] serverHandles,
              Object[] values,
              int[][] errors) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.syncWrite(numItems,serverHandles,values,errors);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * asyncRead. 
   *
   * @param     numItems The numItems (in)
   * @param     serverHandles The serverHandles (in)
   * @param     errors The errors (out: use single element array)
   * @param     transactionID The transactionID (in)
   * @param     cancelID The cancelID (out: use single element array)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void asyncRead  (
              int numItems,
              int[] serverHandles,
              int[][] errors,
              int transactionID,
              int[] cancelID) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.asyncRead(numItems,serverHandles,errors,transactionID,cancelID);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * asyncWrite. 
   *
   * @param     numItems The numItems (in)
   * @param     serverHandles The serverHandles (in)
   * @param     values A Variant (in)
   * @param     errors The errors (out: use single element array)
   * @param     transactionID The transactionID (in)
   * @param     cancelID The cancelID (out: use single element array)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void asyncWrite  (
              int numItems,
              int[] serverHandles,
              Object[] values,
              int[][] errors,
              int transactionID,
              int[] cancelID) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.asyncWrite(numItems,serverHandles,values,errors,transactionID,cancelID);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * asyncRefresh. 
   *
   * @param     source The source (in)
   * @param     transactionID The transactionID (in)
   * @param     cancelID The cancelID (out: use single element array)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void asyncRefresh  (
              short source,
              int transactionID,
              int[] cancelID) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.asyncRefresh(source,transactionID,cancelID);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * asyncCancel. 
   *
   * @param     cancelID The cancelID (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void asyncCancel  (
              int cancelID) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCGroupProxy.asyncCancel(cancelID);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

}
