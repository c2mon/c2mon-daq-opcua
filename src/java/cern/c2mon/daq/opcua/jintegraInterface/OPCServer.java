/******************************************************************************
 * Copyright (C) 2010-2016 CERN. All rights not expressly granted are reserved.
 * 
 * This file is part of the CERN Control and Monitoring Platform 'C2MON'.
 * C2MON is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the license.
 * 
 * C2MON is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with C2MON. If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/
package cern.c2mon.daq.opcua.jintegraInterface;

import com.linar.jintegra.*;

/**
 * COM Class 'OPCServer'. Generated 10/5/2006 11:24:10 AM
 * from 'G:\Users\t\timoper\Public\opcdaauto.dll'<P>
 * Generated using com2java Version 2.6 Copyright (c) Intrinsyc Software International, Inc.
 * See  <A HREF="http://j-integra.intrinsyc.com/">http://j-integra.intrinsyc.com/</A><P>
 * Description '<B>OPC Automation Server</B>'
 *
 * Generator Options:
 *   AwtForOcxs = False
 *   PromptForTypeLibraries = False
 *   RetryOnReject = False
 *   IDispatchOnly = False
 *   GenBeanInfo = False
 *   LowerCaseMemberNames = True
 *   TreatInStarAsIn = False
 *   ArraysAsObjects = False
 *   OmitRestrictedMethods = False
 *   ClashPrefix = zz_
 *   ImplementConflictingInterfaces = False
 *   DontRenameSameMethods = False
 *   RenameConflictingInterfaceMethods = False
 *   ReuseMethods = False
 *
 * Command Line Only Options:
 *   MakeClsidsPublic = False
 *   DontOverwrite = False
 */
public class OPCServer implements com.linar.jintegra.RemoteObjRef, cern.c2mon.daq.opcua.jintegraInterface.IOPCAutoServer {

  private static final String CLSID = "28e68f9a-8d75-11d1-8dc3-3c302a000000";

  protected String getJintegraVersion() { return "2.6"; }

  // Interface delegates
  private cern.c2mon.daq.opcua.jintegraInterface.IOPCAutoServerProxy d_IOPCAutoServerProxy = null;

  /** Access this COM class's cern.c2mon.daq.opcua.jintegraInterface.IOPCAutoServer interface */
  public cern.c2mon.daq.opcua.jintegraInterface.IOPCAutoServer getAsIOPCAutoServer() { return d_IOPCAutoServerProxy; }

  /** Compare this object with another */
  public boolean equals(Object o) { 
	if(java.beans.Beans.isDesignTime()) return super.equals(o);
	else return getJintegraDispatch() == null ? false : getJintegraDispatch().equals(o);
  }


  /** the hashcode for this object */
  public int hashCode() { return getJintegraDispatch() == null ? 0 : getJintegraDispatch().hashCode(); }

   /**
   * getActiveObject. Get a reference to a running instance of this class on the current machine using native code.
   *                  <B>Uses native code (See GetActiveObject() in MS doc) and thus can only be used on MS Windows</B>
   *
   * @return    A reference to the running object.
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If there was an error attaching to the instance.
   */
  public static OPCServer getActiveObject() throws com.linar.jintegra.AutomationException, java.io.IOException {
    return new OPCServer(com.linar.jintegra.Dispatch.getActiveObject(CLSID));
  }

  /**
   * bindUsingMoniker. Bind to a running instance of this class using the supplied ObjRef moniker
   *
   * @return    A reference to the running object.
   * @param     moniker The ObjRef Moniker (Created using Windows CreateObjrefMoniker() and IMoniker->GetDisplayName).
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If there was an error attaching to the instance.
   */
  public static OPCServer bindUsingMoniker(String moniker) throws com.linar.jintegra.AutomationException, java.io.IOException {
    return new OPCServer(com.linar.jintegra.Dispatch.bindUsingMoniker(moniker));
  }

  /** J-Integra for COM internal method */
  public com.linar.jintegra.Dispatch getJintegraDispatch() {  return d_IOPCAutoServerProxy; }

  /**
   * addDIOPCServerEventListener.  Listen to events generated by this class.
   *
   * @param    theListener An object that implements the cern.c2mon.daq.opcua.jintegraInterface.DIOPCServerEvent interface.
   * @exception java.io.IOException If there are communications problems.
   */
  public void addDIOPCServerEventListener(cern.c2mon.daq.opcua.jintegraInterface.DIOPCServerEvent theListener) throws java.io.IOException {
    d_IOPCAutoServerProxy.addListener("28e68f93-8d75-11d1-8dc3-3c302a000000", theListener, this);
  }

  /**
   * removeDIOPCServerEventListener.  Stop listening to events generated by this class.
   *
   * @param    theListener An object that implements the cern.c2mon.daq.opcua.jintegraInterface.DIOPCServerEvent interface.
   * @exception java.io.IOException If there are communications problems.
   */
  public void removeDIOPCServerEventListener(cern.c2mon.daq.opcua.jintegraInterface.DIOPCServerEvent theListener) throws java.io.IOException {
    d_IOPCAutoServerProxy.removeListener("28e68f93-8d75-11d1-8dc3-3c302a000000", theListener);
  }

  /**
   * Constructs a OPCServer on the local host.
   * @exception java.io.IOException if there are problems communicating via DCOM 
   * @exception java.net.UnknownHostException if the host can not be found 
   */
  public OPCServer() throws java.io.IOException, java.net.UnknownHostException {
    this("localhost");
  }

  /**
   * Construct a OPCServer on specified host.
   * @param     host  the host on which the object should be created
   * @exception java.io.IOException if there are problems communicating via DCOM 
   * @exception java.net.UnknownHostException if the host can not be found 
   */
  public OPCServer(String host) throws java.io.IOException, java.net.UnknownHostException {
    d_IOPCAutoServerProxy = new cern.c2mon.daq.opcua.jintegraInterface.IOPCAutoServerProxy(CLSID, host, null);
  }

  /**
   * Construct a OPCServer using a reference to such an object returned from a COM server
   * @param     obj an object returned from a COM server
   * @exception java.io.IOException if there are problems communicating via DCOM 
   */
  public OPCServer(Object obj) throws java.io.IOException {
    d_IOPCAutoServerProxy = new cern.c2mon.daq.opcua.jintegraInterface.IOPCAutoServerProxy(obj);
  }

  /**
   * Release a OPCServer.
   */
  public void release() {
    com.linar.jintegra.Cleaner.release(d_IOPCAutoServerProxy);
  }

  /**
   * getPropertyByName. Get the value of a property dynamically at run-time, based on its name
   *
   * @return    The value of the property.
   * @param     name The name of the property to get.
   * @exception java.lang.NoSuchFieldException If the property does not exit.
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public Object getPropertyByName(String name) throws NoSuchFieldException, java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getPropertyByName(name);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    } catch(NoSuchFieldException noSuchFieldException) {
      noSuchFieldException.fillInStackTrace();
      throw noSuchFieldException;
    }
  }

  /**
   * getPropertyByName. Get the value of a property dynamically at run-time, based on its name and a parameter
   *
   * @return    The value of the property.
   * @param     name The name of the property to get.
   * @param     rhs A parameter used when getting the proxy.
   * @exception java.lang.NoSuchFieldException If the property does not exit.
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public Object getPropertyByName(String name, Object rhs) throws NoSuchFieldException, java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getPropertyByName(name, rhs);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    } catch(NoSuchFieldException noSuchFieldException) {
      noSuchFieldException.fillInStackTrace();
      throw noSuchFieldException;
    }
  }

  /**
   * invokeMethodByName. Invoke a method dynamically at run-time
   *
   * @return    The value returned by the method (null if none).
   * @param     name The name of the method to be invoked.
   * @param     parameters One element for each parameter. Use primitive type wrappers.
   *            to pass primitive types (eg Integer to pass an int).
   * @exception java.lang.NoSuchMethodException If the method does not exit.
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public Object invokeMethodByName(String name, Object[] parameters) throws NoSuchMethodException, java.io.IOException, com.linar.jintegra.AutomationException {
    return d_IOPCAutoServerProxy.invokeMethodByName(name, parameters);
  }

  /**
   * invokeMethodByName. Invoke a method dynamically at run-time
   *
   * @return    The value returned by the method (null if none).
   * @param     name The name of the method to be invoked.
   * @exception java.lang.NoSuchMethodException If the method does not exit.
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public Object invokeMethodByName(String name) throws NoSuchMethodException, java.io.IOException, com.linar.jintegra.AutomationException {
    return d_IOPCAutoServerProxy.invokeMethodByName(name, new Object[]{});
  }

  /**
   * getStartTime. Gets the start time of the OPC server.
   *
   * @return    The startTime
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public java.util.Date getStartTime  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getStartTime();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getCurrentTime. Gets the current time of the OPC server.
   *
   * @return    The currentTime
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public java.util.Date getCurrentTime  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getCurrentTime();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getLastUpdateTime. Gets the last time the OPC server sent a data update.
   *
   * @return    The lastUpdateTime
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public java.util.Date getLastUpdateTime  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getLastUpdateTime();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getMajorVersion. Gets the major version number for the OPC server.
   *
   * @return    The majorVersion
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public short getMajorVersion  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getMajorVersion();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getMinorVersion. Gets the minor version number for the OPC server.
   *
   * @return    The minorVersion
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public short getMinorVersion  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getMinorVersion();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getBuildNumber. Gets the build number for the OPC server.
   *
   * @return    The buildNumber
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public short getBuildNumber  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getBuildNumber();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getVendorInfo. Gets an identifier for the OPC server's vendor.
   *
   * @return    The vendorInfo
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public String getVendorInfo  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getVendorInfo();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getServerState. Gets the current OPC server state.
   *
   * @return    The serverState
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getServerState  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getServerState();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getServerName. Gets the OPC server name.
   *
   * @return    The serverName
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public String getServerName  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getServerName();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getServerNode. Gets the OPC server node name.
   *
   * @return    The serverNode
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public String getServerNode  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getServerNode();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getClientName. Gets the current client name.
   *
   * @return    The clientName
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public String getClientName  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getClientName();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * setClientName. Gets the current client name.
   *
   * @param     clientName The clientName (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setClientName  (
              String clientName) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCAutoServerProxy.setClientName(clientName);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getLocaleID. Gets the current language/locale setting.
   *
   * @return    The localeID
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getLocaleID  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getLocaleID();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * setLocaleID. Gets the current language/locale setting.
   *
   * @param     localeID The localeID (in)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void setLocaleID  (
              int localeID) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCAutoServerProxy.setLocaleID(localeID);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getBandwidth. Gets an estimate of current OPC server utilization as a percentage.
   *
   * @return    The bandwidth
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public int getBandwidth  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getBandwidth();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getOPCGroups. The collection of OPCGroup Objects
   *
   * @return    An reference to a cern.c2mon.daq.opcua.jintegraInterface.OPCGroups
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public cern.c2mon.daq.opcua.jintegraInterface.OPCGroups getOPCGroups  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getOPCGroups();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getPublicGroupNames. Gets a list of public group names.
   *
   * @return    A Variant
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public Object getPublicGroupNames  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getPublicGroupNames();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getOPCServers. Returns an array of Server names on the specified node
   *
   * @param     node A Variant (in, optional, pass null if not required)
   * @return    A Variant
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public Object getOPCServers  (
              Object node) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getOPCServers(node);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * connect. Connects to an OPC Server with the specified name and node
   *
   * @param     progID The progID (in)
   * @param     node A Variant (in, optional, pass null if not required)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void connect  (
              String progID,
              Object node) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCAutoServerProxy.connect(progID,node);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * disconnect. Terminate the connection with the OPC Server
   *
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void disconnect  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCAutoServerProxy.disconnect();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * createBrowser. Create a new OPCBrowser Object
   *
   * @return    An reference to a cern.c2mon.daq.opcua.jintegraInterface.OPCBrowser
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public cern.c2mon.daq.opcua.jintegraInterface.OPCBrowser createBrowser  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.createBrowser();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getErrorString. Convert an error code to a descriptive string
   *
   * @param     errorCode The errorCode (in)
   * @return    The errorString
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public String getErrorString  (
              int errorCode) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.getErrorString(errorCode);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * queryAvailableLocaleIDs. Returns the LocaleIDs supported by this server
   *
   * @return    A Variant
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public Object queryAvailableLocaleIDs  () throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      return d_IOPCAutoServerProxy.queryAvailableLocaleIDs();
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * queryAvailableProperties. Returns the properties available for the specified item.
   *
   * @param     itemID The itemID (in)
   * @param     count The count (out: use single element array)
   * @param     propertyIDs The propertyIDs (out: use single element array)
   * @param     descriptions The descriptions (out: use single element array)
   * @param     dataTypes The dataTypes (out: use single element array)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void queryAvailableProperties  (
              String itemID,
              int[] count,
              int[][] propertyIDs,
              String[][] descriptions,
              short[][] dataTypes) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCAutoServerProxy.queryAvailableProperties(itemID,count,propertyIDs,descriptions,dataTypes);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * getItemProperties. Returns the properties for the specified item.
   *
   * @param     itemID The itemID (in)
   * @param     count The count (in)
   * @param     propertyIDs The propertyIDs (in)
   * @param     propertyValues A Variant (out: use single element array)
   * @param     errors The errors (out: use single element array)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void getItemProperties  (
              String itemID,
              int count,
              int[] propertyIDs,
              Object[][] propertyValues,
              int[][] errors) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCAutoServerProxy.getItemProperties(itemID,count,propertyIDs,propertyValues,errors);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

  /**
   * lookupItemIDs. Returns the item ids for the specified properties.
   *
   * @param     itemID The itemID (in)
   * @param     count The count (in)
   * @param     propertyIDs The propertyIDs (in)
   * @param     newItemIDs The newItemIDs (out: use single element array)
   * @param     errors The errors (out: use single element array)
   * @exception java.io.IOException If there are communications problems.
   * @exception com.linar.jintegra.AutomationException If the remote server throws an exception.
   */
  public void lookupItemIDs  (
              String itemID,
              int count,
              int[] propertyIDs,
              String[][] newItemIDs,
              int[][] errors) throws java.io.IOException, com.linar.jintegra.AutomationException {
    try {
      d_IOPCAutoServerProxy.lookupItemIDs(itemID,count,propertyIDs,newItemIDs,errors);
    } catch(com.linar.jintegra.AutomationException automationException) {
      automationException.fillInStackTrace();
      throw automationException;
    }
  }

}
